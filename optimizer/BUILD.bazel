# -*- python -*-

package(default_visibility = ["//visibility:public"])

load("//tools:test.bzl", "cc_googletest")
load("//tools:shared_library.bzl", "idto_cc_shared_library")

idto_cc_shared_library(
    name = "optimizer",
    deps = [
        ":convergence_criteria_tolerances",
        ":inverse_dynamics_partials",
        ":penta_diagonal_matrix",
        ":penta_diagonal_solver",
        ":problem_definition",
        ":solver_parameters",
        ":trajectory_optimizer",
        ":trajectory_optimizer_solution",
        ":trajectory_optimizer_state",
        ":trajectory_optimizer_workspace",
        ":velocity_partials",
        ":warm_start",
    ],
)

idto_cc_shared_library(
    name = "penta_diagonal_matrix",
    srcs = ["penta_diagonal_matrix.cc"],
    hdrs = ["penta_diagonal_matrix.h"],
    deps = [
        "@drake//common:default_scalars",
        "@drake//common:essential",
    ],
)

idto_cc_shared_library(
    name = "penta_diagonal_solver",
    srcs = [],
    hdrs = ["penta_diagonal_solver.h"],
    deps = [
        ":penta_diagonal_matrix",
        "//utils:profiler",
        "@drake//common:essential",
    ],
)

idto_cc_shared_library(
    name = "trajectory_optimizer",
    srcs = ["trajectory_optimizer.cc"],
    hdrs = [
        "trajectory_optimizer.h",
    ],
    deps = [
        ":inverse_dynamics_partials",
        ":penta_diagonal_matrix",
        ":penta_diagonal_solver",
        ":problem_definition",
        ":solver_parameters",
        ":trajectory_optimizer_solution",
        ":trajectory_optimizer_state",
        ":trajectory_optimizer_workspace",
        ":velocity_partials",
        ":warm_start",
        "//utils:profiler",
        "@drake//common:essential",
        "@drake//geometry:scene_graph_inspector",
        "@drake//multibody/plant",
    ],
)

idto_cc_shared_library(
    name = "problem_definition",
    hdrs = [
        "problem_definition.h",
    ],
    deps = [
        "@drake//common:essential",
    ],
)

idto_cc_shared_library(
    name = "convergence_criteria_tolerances",
    hdrs = [
        "convergence_criteria_tolerances.h",
    ],
    deps = [
        "@drake//common/yaml",
    ],
)

idto_cc_shared_library(
    name = "solver_parameters",
    hdrs = [
        "solver_parameters.h",
    ],
    deps = [":convergence_criteria_tolerances"],
)

idto_cc_shared_library(
    name = "warm_start",
    hdrs = [
        "warm_start.h",
    ],
    deps = [
        ":trajectory_optimizer_state",
        "@drake//common:essential",
        "@drake//multibody/plant",
    ],
)

idto_cc_shared_library(
    name = "velocity_partials",
    srcs = ["velocity_partials.cc"],
    hdrs = [
        "velocity_partials.h",
    ],
    deps = [
        "@drake//common:default_scalars",
        "@drake//common:essential",
    ],
)

idto_cc_shared_library(
    name = "inverse_dynamics_partials",
    srcs = ["inverse_dynamics_partials.cc"],
    hdrs = [
        "inverse_dynamics_partials.h",
    ],
    deps = [
        "@drake//common:default_scalars",
        "@drake//common:essential",
    ],
)

cc_googletest(
    name = "penta_diagonal_solver_test",
    srcs = ["test/penta_diagonal_solver_test.cc"],
    deps = [
        ":penta_diagonal_matrix",
        ":penta_diagonal_solver",
        "@drake//common/test_utilities:eigen_matrix_compare",
    ],
)

idto_cc_shared_library(
    name = "trajectory_optimizer_state",
    srcs = ["trajectory_optimizer_state.cc"],
    hdrs = [
        "trajectory_optimizer_state.h",
    ],
    deps = [
        ":inverse_dynamics_partials",
        ":penta_diagonal_matrix",
        ":trajectory_optimizer_workspace",
        ":velocity_partials",
        "@drake//common:default_scalars",
        "@drake//common:essential",
        "@drake//multibody/plant",
    ],
)

idto_cc_shared_library(
    name = "trajectory_optimizer_solution",
    srcs = ["trajectory_optimizer_solution.cc"],
    hdrs = [
        "trajectory_optimizer_solution.h",
    ],
    deps = [
        "@drake//common:default_scalars",
        "@drake//common:essential",
    ],
)

idto_cc_shared_library(
    name = "trajectory_optimizer_workspace",
    srcs = ["trajectory_optimizer_workspace.cc"],
    hdrs = [
        "trajectory_optimizer_workspace.h",
    ],
    deps = [
        "@drake//common:default_scalars",
        "@drake//common:essential",
        "@drake//multibody/plant",
    ],
)

cc_googletest(
    name = "trajectory_optimizer_test",
    srcs = ["test/trajectory_optimizer_test.cc"],
    data = [
        "//examples:models",
        "@drake//examples/pendulum:models",
        "@drake//manipulation/models/iiwa_description:models",
        "@drake//multibody/benchmarks/acrobot:models",
    ],
    deps = [
        ":inverse_dynamics_partials",
        ":penta_diagonal_matrix",
        ":trajectory_optimizer",
        ":trajectory_optimizer_workspace",
        ":velocity_partials",
        "//utils:find_resource",
        "@drake//common:find_resource",
        "@drake//common/test_utilities:eigen_matrix_compare",
        "@drake//common/test_utilities:limit_malloc",
        "@drake//multibody/parsing",
        "@drake//multibody/plant",
    ],
)

