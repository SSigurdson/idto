##
#
# Minimal ball rolling example, for testing only
#
##

# Initial state
q_init : [1.57, 2.0, 0.0, 4.4, 0.0, 2.4, 0.0,   # arm positions
          1.0, 0.0, 0.0, 0.0,                   # ball orientation
          0.6, 0.27, 0.06]                      # ball position
v_init : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# Target state
q_nom_start : [1.57, 2.0, 0.0, 4.4, 0.0, 2.4, 0.0,
               1.0, 0.0, 0.0, 0.0,
               0.6, 0.0, 0.06]
q_nom_end : [1.57, 2.0, 0.0, 4.4, 0.0, 2.4, 0.0,
             1.0, 0.0, 0.0, 0.0,
             0.6, 0.0, 0.06]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [1.57, 2.0, 0.0, 4.4, 0.0, 2.4, 0.0,
           1.0, 0.0, 0.0, 0.0,
           0.6, 0.27, 0.06]

# Cost Weights
Qq: [0, 0, 0, 0, 0, 0, 0,
     1e-4, 0, 0, 0,
     1, 1, 1]
Qv: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1,
     0.1, 0.1, 0.1]
R: [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
    10, 10, 10,
    10, 10, 10]

Qfq: [0, 0, 0, 0, 0, 0, 0,
      1e-4, 0, 0, 0,
      10, 10, 10]
Qfv: [1, 1, 1, 1, 1, 1, 1,
      0.1, 0.1, 0.1,
      0.1, 0.1, 0.1]

# Problem definition parameters
time_step : 0.05   # Discretization timestep (seconds)
num_steps : 10     # number of timesteps

# Solver parameters
max_iters : 10              # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
scaling : false
equality_constraints : true
num_threads : 4

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : false

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : false

# Contact model parameters. 
contact_stiffness : 300     # normal force stiffness, in N/m
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Amount of smoothing (and therefore force at a distance) to apply when
# computing normal forces. This is equivalent to an analytical version of
# randomized smoothing, assuming that signed distances are drawn from a logistic
# distirbution with the smoothing factor as the scale parameter. Higher values
# mean more smoothing and more force at a distance. 
smoothing_factor : 0.005

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.01    # Regularization velocity, in m/s.

# MPC parameters
mpc : false

