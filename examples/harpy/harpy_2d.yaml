##
#
# Simple planar version of the Harpy robot
#
##

# Initial state [x, y, theta, hip, knee]
q_init : [ 0.0, 0.26, 0.0,-0.8, 1.3]
v_init : [ 0.0, 0.0, 0.0, 0.0, 0.0]

# Target state
q_nom_start : [ 1.0, 0.76, 0.0,-0.8, 1.3]
q_nom_end   : [ 1.0, 0.76, 0.0,-0.8, 1.3]
q_nom_relative_to_q_init : [false, false, false, false, false]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess   : [ 1.0, 0.26, 0.0,-0.8, 1.3]

# Cost Weights
Qq : [1.0, 1.0, 1.0, 1.0, 1.0]      # Running cost
Qv : [0.1, 0.1, 0.1, 0.1, 0.1]

R : [1e2, 1e0, 1e2, 0.1, 0.1]

Qfq : [10, 1000, 10, 10, 10]  # Terminal cost
Qfv : [1.0, 1.0, 1.0, 1.0, 1.0]

# Problem definition parameters
time_step : 0.05   # Discretization timestep (seconds)
num_steps : 80    # number of timesteps

# Solver parameters
max_iters : 200               # maximum Gauss-Newton iterations
method : "trust_region"       # solver method, {linesearch, trust_region}
scaling : true
scaling_method : "double_sqrt"
equality_constraints : false
linear_solver : "pentadiagonal_lu"
Delta0 : 1e-3
num_threads : 4 

# Convergence thresholds
tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : true

# Debugging parameters
verbose : true
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
contact_stiffness : 800     # normal force stiffness, in N/m
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Amount of smoothing (and therefore force at a distance) to apply when
# computing normal forces. This is equivalent to an analytical version of
# randomized smoothing, assuming that signed distances are drawn from a logistic
# distirbution with the smoothing factor as the scale parameter. Higher values
# mean more smoothing and more force at a distance. 
smoothing_factor : 0.01

# Friction
friction_coefficient : 1.0  # Coefficient of friction.
stiction_velocity: 0.05     # Regularization velocity, in m/s.

# MPC parameters
mpc : false
